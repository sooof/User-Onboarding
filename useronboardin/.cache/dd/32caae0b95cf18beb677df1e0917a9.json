{"id":"api-mocks/browser.js","dependencies":[{"name":"/Users/raylea/Dropbox/Workspace/github/LS/User-Onboarding/useronboardin/package.json","includedInParent":true,"mtime":1634265377010},{"name":"msw","loc":{"line":2,"column":28},"parent":"/Users/raylea/Dropbox/Workspace/github/LS/User-Onboarding/useronboardin/src/api-mocks/browser.js","resolved":"/Users/raylea/Dropbox/Workspace/github/LS/User-Onboarding/useronboardin/node_modules/msw/lib/esm/index.js"},{"name":"./handlers","loc":{"line":3,"column":25},"parent":"/Users/raylea/Dropbox/Workspace/github/LS/User-Onboarding/useronboardin/src/api-mocks/browser.js","resolved":"/Users/raylea/Dropbox/Workspace/github/LS/User-Onboarding/useronboardin/src/api-mocks/handlers.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.worker = void 0;\n\nvar _msw = require(\"msw\");\n\nvar _handlers = require(\"./handlers\");\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar worker = _msw.setupWorker.apply(void 0, _toConsumableArray(_handlers.handlers));\n\nexports.worker = worker;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"api-mocks/browser.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":0},"source":"api-mocks/browser.js","original":{"line":3,"column":0}},{"generated":{"line":24,"column":0},"source":"api-mocks/browser.js","original":{"line":5,"column":7}},{"name":"worker","generated":{"line":24,"column":4},"source":"api-mocks/browser.js","original":{"line":5,"column":13}},{"generated":{"line":24,"column":10},"source":"api-mocks/browser.js","original":{"line":5,"column":19}},{"name":"setupWorker","generated":{"line":24,"column":13},"source":"api-mocks/browser.js","original":{"line":5,"column":22}},{"name":"handlers","generated":{"line":24,"column":63},"source":"api-mocks/browser.js","original":{"line":5,"column":37}},{"generated":{"line":24,"column":81},"source":"api-mocks/browser.js","original":{"line":5,"column":22}},{"generated":{"line":24,"column":83},"source":"api-mocks/browser.js","original":{"line":5,"column":7}}],"sources":{"api-mocks/browser.js":"// This is for the fake API. Do not delete!\nimport { setupWorker } from 'msw'\nimport { handlers } from './handlers'\n\nexport const worker = setupWorker(...handlers)\n"},"lineCount":null}},"error":null,"hash":"c98161f7d67c3703103d446fa21a0779","cacheData":{"env":{}}}